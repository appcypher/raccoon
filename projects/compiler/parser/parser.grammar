newline =
    | newline

indent =
    | indent

dedent =
    | dedent

identifier =
    | identifier

integer =
    | dec_integer
    | bin_integer
    | oct_integer
    | hex_integer

float =
    | dec_float

imag_integer =
    | imag_integer

imag_float =
    | imag_float

string =
    | string

byte_string =
    | byte_string

prefixed_string =
    | prefixed_string

power_expr =
    | '√'? atom_expr ('^' unary_expr | '²')?

unary_expr =
    | ('+' | '-' | '~')* power_expr

mul_expr =
    | unary_expr (('*' | '@' | '/' | '%' | '//') unary_expr)*

sum_expr =
    | mul_expr (('+' | '-') mul_expr)*

shift_expr =
    | sum_expr (('<<' | '>>') sum_expr)*

and_expr =
    | shift_expr ('&' shift_expr)*

xor_expr =
    | and_expr ('||' and_expr)*

or_expr =
    | xor_expr ('|' xor_expr)*

comparison_op =
    | '<'
    | '>'
    | '=='
    | '>='
    | '<='
    | '!='
    | 'in'
    | 'not' 'in'
    | 'is' 'not'
    | 'is'

comparison_expr =
    | or_expr (comparison_op or_expr)*

not_test =
    | 'not'* comparison_expr

and_test =
    | not_test ('and' not_test)*

or_test =
    | and_test ('or' and_test)*

test =
    | or_test ('if' expr 'else' expr)?

named_expr =
    | identifier ":=" test

named_expr_or_test = # Possible divergence from Python's `namedexpr_test`
    | named_expr
    | test

lambda_param =
    | identifier ('=' expr)?

lambda_params =
    | '(' func_params? ')'
    | lambda_param (',' lambda_param)* (',' '/' (',' func_param)*)? (',' '*' lambda_param (',' lambda_param)*)? (',' '**' lambda_param)? ','?
    | '*' lambda_param (',' lambda_param)* (',' '**' lambda_param)? ','?
    | '**' lambda_param ','?

lambda_expr_def =
    | 'lambda' lambda_params? ':' expr

expr =
    | lambda_expr_def
    | test

exprs =
    | expr (',' expr)* ','?

rest_expr =
    | ('*' | '**')? expr

rest_exprs =
    | rest_expr (',' rest_expr)* ','?

lambda_block_def =
    | 'lambda' lambda_params? ':' indent statements dedent

indentable_expr =
    | lambda_block_def
    | expr

indentable_exprs =
    | indentable_expr (',' indentable_expr)* ','?

rest_indentable_expr =
    | ('*' | '**')? indentable_expr

rest_indentable_exprs =
    | rest_indentable_expr (',' rest_indentable_expr)* ','?

comprehension_if = # Diverges from Python's `comp_if`
    | 'if' (named_expr | indentable_exprs)

sync_comprehension_for =
    | 'for' for_lhs 'in' indentable_expr comprehension_if?

comprehension_for =
    | 'async'? sync_comprehension_for ('async'? sync_comprehension_for)*

yield_argument =
    | 'from' indentable_expr
    | indentable_exprs

yield_expr =
    | 'yield' yield_argument?

expr_suite =
    | rest_indentable_expr
    | indent rest_indentable_expr dedent

indentable_exprs_or_comprehension = # Diverges from Python's `testlist_comp`
    | (named_expr | rest_indentable_expr) comprehension_for
    | (named_expr | rest_indentable_exprs)

dict_or_set = # Diverges from Python's `dictorsetmaker`
    | test ':' expr_suite comprehension_for
    | test ':' expr_suite (',' test ':' expr_suite)* ','?
    | indentable_exprs_or_comprehension

subscript_index =
    | test? ':' test? (':' test?)?
    | test

subscript =
    | subscript_index (',' subscript_index)* ','?

all_string =
    | string
    | byte_string
    | prefixed_string

atom = # When `string+` has more than one `string` it gets compiled as a stringlist.
    | '(' indentable_exprs_or_comprehension? ')'
    | '(' yield_expr ')'
    | '{' dict_or_set? '}'
    | '[' indentable_exprs_or_comprehension? ']'
    | float
    | all_string+
    | 'None'
    | 'True'
    | 'False'
    | identifier

argument =
    | identifier '=' indentable_expr
    | rest_indentable_expr

arguments =
    | argument (',' argument)* ','?

atom_trailer =
    | '(' arguments? ')' # TODO: generator comprehension
    | '[' subscripts ']'
    | '.' identifier

atom_expr =
    | 'await'? atom atom_trailer*

with_item =
    | expr ('as' identifier)?

with_statement =
    | 'with' with_item (',' with_item)*  ','? ':' func_suite

else_clause =
    | 'else' ':' func_suite

except_clause =
    | 'except' identifier ('as' identifier)? ':' func_suite

finally_clause =
    | 'finally' ':' func_suite

try_statement =
    | 'try' ':' func_suite (except_clause+ else_clause? finally_clause? | finally_clause)

for_if_expr =
    | 'if' (named_expr | expr)

for_statement =
    | 'for' for_lhs 'in' exprs for_if_expr? ':' func_suite else_clause?

while_statement =
    | 'while' named_expr_or_test for_if_expr? ':' func_suite else_clause?

elif_clause =
    | 'elif' named_expr_or_test ':' func_suite

if_statement =
    | 'if' named_expr_or_test ':' func_suite elif_clause* else_clause?

generic_type =
    | identifier '[' type_annotation, (',' type_annotation)* ','? ']'

function_type =
    | '(' (type_annotation, (',' type_annotation)* ','?)? ')' '->' type_annotation

list_type =
    | '[' type_annotation, (',' type_annotation)* ','? ']'

tuple_type =
    | '(' type_annotation, (',' type_annotation)* ','? ')'

intersection_type =
    | atom_type ('&' atom_type)*

union_type =
    | intersection_type ('|' intersection_type)*

atom_type =
    | function_type
    | list_type
    | tuple_type
    | generic_type
    | identifier

type_annotation =
    | union_type

identifiers =
    | identifier (',' identifier)* ','?

generics_annotation =
    | '[' identifiers ']'

class_def = # Divergence from Python's `arglist`
    | 'class' identifier generics_annotation? ('(' identifiers ')')? ':' func_suite

lhs_argument_trailer =
    | '[' subscripts ']'
    | '.' identifier

lhs_argument =
    | identifier atom_trailer*

lhs_arguments =
    | lhs_argument (',' lhs_argument)* ','?

lhs = # Diverges from Python's `expr_stmt`
    | '(' lhs_arguments ')'
    | '[' lhs_arguments ']'
    | lhs_arguments

for_lhs = # Diverges from Python's `expr_stmt`
    | '(' identifiers ')'
    | '[' identifiers ']'
    | identifiers

func_param =
    | identifier (':' type_annotation)? ('=' indentable_expr)?

func_params =
    | func_param (',' func_param)* (',' '/' (',' func_param)*)? (',' '*' func_param (',' func_param)*)? (',' '**' func_param)? ','?
    | '*' func_param (',' func_param)* (',' '**' func_param)? ','?
    | '**' func_param ','?

func_suite =
    | simple_statement
    | indent statements dedent

func_def =
    | 'def' identifier generics_annotation? '(' func_params? ')' ('->' type_annotation)? ':' func_suite

async_statement =
    | 'async' (func_def | with_statement | for_statement)

global_statement =
    | 'global' identifier (',' identifier)*

nonlocal_statement =
    | 'nonlocal' identifier (',' identifier)*

assert_statement =
    | 'assert' expr (',' expr)?

pass_statement =
    | 'pass'

break_statement =
    | 'break'

continue_statement =
    | 'continue'

return_statement =
    | 'return' exprs?

raise_statement =
    | 'raise' (expr ('from' expr))?

flow_statement =
    | break_statement
    | continue_statement
    | return_statement
    | raise_statement
    | yield_expr

assignment_op =
    | '+='
    | '-='
    | '*='
    | '@='
    | '/='
    | '%='
    | '&='
    | '|='
    | '^='
    | '<<='
    | '>>='
    | '**='
    | '//='
    | '='

assignment_annotation =
    | ':' type_annotation ('=' rest_indentable_expr)?

assignment_statement = # TODO: Rest destructuring
    | lhs assignment_annotation
    | lhs assignment_op (yield_expr | rest_indentable_exprs)
    | lhs ('=' lhs)+ '=' (yield_expr | rest_indentable_exprs)

path =
    | identifier ('.' identifier)*

import_sub_path_with_alias =
    | identifier ('as' identifier)?

import_sub_paths_with_alias =
    | import_sub_path_with_alias (',' import_sub_path_with_alias)* ','?

import_main_path =
    | '.'* path
    | '.'+

import_sub_paths =
    | '*'
    | '(' import_sub_paths_with_alias ')'
    | import_sub_paths_with_alias

import_main_path_with_alias =
    | import_main_path ('as' identifier)?

import_main =
    | 'import' main_path_with_alias

import_from =
    | 'from' import_main_path 'import' import_sub_paths

import_statement =
    | import_main
    | import_from

decorator_statement =
    | '@' path ('(' arguments ')')? newline

decorators =
    | decorator_statement+

async_func_def =
    | 'async' func_def

decorated_statement =
    | decorators (class_def | func_def | async_func_def)

compound_statement:
    | if_statement
    | while_statement
    | for_statement
    | try_statement
    | with_statement
    | decorated_statement
    | func_def
    | class_def
    | async_statement

small_statement =
    | assignment_statement
    | indentable_exprs
    | pass_statement
    | flow_statement
    | import_statement
    | global_statement
    | nonlocal_statement
    | assert_statement

simple_statement = # Diverges from Python's `simple_stmt`
    | small_statement (';' small_statement)* ';'?

statement =
    | compound_statement
    | simple_statement

statements =
    | (newline | statement)+

program =
    | statements?
